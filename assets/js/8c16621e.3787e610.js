"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[631],{3905:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>y});var a=t(7294);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);r&&(a=a.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,a,n=function(e,r){if(null==e)return{};var t,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var l=a.createContext({}),c=function(e){var r=a.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):s(s({},r),e)),t},p=function(e){var r=c(e.components);return a.createElement(l.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return a.createElement(a.Fragment,{},r)}},h=a.forwardRef((function(e,r){var t=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),h=c(t),y=n,m=h["".concat(l,".").concat(y)]||h[y]||u[y]||o;return t?a.createElement(m,s(s({ref:r},p),{},{components:t})):a.createElement(m,s({ref:r},p))}));function y(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var o=t.length,s=new Array(o);s[0]=h;var i={};for(var l in r)hasOwnProperty.call(r,l)&&(i[l]=r[l]);i.originalType=e,i.mdxType="string"==typeof e?e:n,s[1]=i;for(var c=2;c<o;c++)s[c]=t[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},1590:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=t(7462),n=(t(7294),t(3905));const o={},s="Array Processor",i={unversionedId:"reference/helpers/processors/array-processor",id:"reference/helpers/processors/array-processor",title:"Array Processor",description:"The Array Processor makes it possible to pass a single array through multiple chained mutation methods, and then output the result as either the transformed array, or a string. It supports all Array Helper methods in a chained form.",source:"@site/docs/reference/helpers/processors/array-processor.md",sourceDirName:"reference/helpers/processors",slug:"/reference/helpers/processors/array-processor",permalink:"/reference/helpers/processors/array-processor",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Array Helper",permalink:"/reference/helpers/array-helper"},next:{title:"List Filter",permalink:"/reference/helpers/processors/list-filter"}},l={},c=[{value:"Extracting The Array",id:"extracting-the-array",level:2},{value:"Converting a processed array into a string",id:"converting-a-processed-array-into-a-string",level:2},{value:"Gotchas",id:"gotchas",level:2}],p={toc:c};function u(e){let{components:r,...t}=e;return(0,n.kt)("wrapper",(0,a.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"array-processor"},"Array Processor"),(0,n.kt)("p",null,"The Array Processor makes it possible to pass a single array through multiple chained mutation methods, and then output the result as either the transformed array, or a string. It supports all ",(0,n.kt)("a",{parentName:"p",href:"../array-helper"},"Array Helper")," methods in a chained form."),(0,n.kt)("h2",{id:"extracting-the-array"},"Extracting The Array"),(0,n.kt)("p",null,"When you've done all the processing necessary, you can get the array back by calling ",(0,n.kt)("inlineCode",{parentName:"p"},"to_array()"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"//['BAR','BAZ','FOO']\n(new Array_Processor(['foo','bar','baz']))\n    ->sort()\n    ->map(fn(string $item) => strtoupper($item))\n    ->to_array();\n")),(0,n.kt)("h2",{id:"converting-a-processed-array-into-a-string"},"Converting a processed array into a string"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"Array_Processor")," implements ",(0,n.kt)("inlineCode",{parentName:"p"},"Can_Convert_To_String"),", which means that it can be typecast into a string directly, or passed into any method or function that typehints a string, and it will automatically be converted into a string when passed through."),(0,n.kt)("p",null,"By default, the array processor will convert the array into a comma-separated value, like so:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"// 'foo,bar,baz'\n(new Array_Processor(['foo','bar','baz']))->to_string();\n")),(0,n.kt)("p",null,"However, if you provide a separator, it will use that instead of ",(0,n.kt)("inlineCode",{parentName:"p"},","),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"// 'foo & bar & baz'\n(new Array_Processor(['foo','bar','baz']))->set_separator(' & ')->to_string();\n")),(0,n.kt)("p",null,"You can directly echo the processor, or generally treat it like a string, too."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"// \"The following items are set in the array: foo,bar,baz\n$result = \"The following items are set in the array: \" . (new Array_Processor(['foo','bar','baz']));\n\n// Echos \"foo and also bar and also baz\"\necho (new Array_Processor(['foo','bar','baz']))->set_separator('and also');\n")),(0,n.kt)("h2",{id:"gotchas"},"Gotchas"),(0,n.kt)("p",null,"The Array Processor assumes that you will always start, and finish with an array. This means that some implementations, such as ",(0,n.kt)("inlineCode",{parentName:"p"},"reduce")," can cause unexpected errors when the accumulator is something other than an array:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"class Tag implements Can_Convert_To_String {\n\n    public function __construct(public readonly string $slug, public readonly string $name){\n\n    }\n}\n\n// This won't work.\n(new Array_Processor([new Tag('rv-life','RV Life'), new Tag('travel','Travel')]))\n    ->reduce(function(string $acc, Tag $value){\n        $acc .= $value->name . ' ' . $value->slug;\n\n        return $acc;\n    },'')\n    ->to_string();\n\n// But this would! And it would return the same result as what the reducer above would return.\n//Note the accumulator is an array, which gets converted to a string.\n(new Array_Processor([new Tag('rv-life','RV Life'), new Tag('travel','Travel')]))\n    ->reduce(function(array $acc, Tag $value){\n        $acc[] = $value->name . ' ' . $value->slug;\n\n        return $acc;\n    },[])\n    ->set_separator('')\n    ->to_string();\n")))}u.isMDXComponent=!0}}]);