"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[953],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>g});var i=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,i)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,i,n=function(e,t){if(null==e)return{};var r,i,n={},s=Object.keys(e);for(i=0;i<s.length;i++)r=s[i],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(i=0;i<s.length;i++)r=s[i],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=i.createContext({}),u=function(e){var t=i.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},d=function(e){var t=u(e.components);return i.createElement(c.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var r=e.components,n=e.mdxType,s=e.originalType,c=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),p=u(r),g=n,m=p["".concat(c,".").concat(g)]||p[g]||l[g]||s;return r?i.createElement(m,o(o({ref:t},d),{},{components:r})):i.createElement(m,o({ref:t},d))}));function g(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=r.length,o=new Array(s);o[0]=p;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a.mdxType="string"==typeof e?e:n,o[1]=a;for(var u=2;u<s;u++)o[u]=r[u];return i.createElement.apply(null,o)}return i.createElement.apply(null,r)}p.displayName="MDXCreateElement"},2327:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>s,metadata:()=>a,toc:()=>u});var i=r(7462),n=(r(7294),r(3905));const s={},o="Object Registries",a={unversionedId:"reference/registries/object-registries/index",id:"reference/registries/object-registries/index",title:"Object Registries",description:"An Object Registry is a type of registry that validates that the items added to this registry are all a",source:"@site/docs/reference/registries/object-registries/index.md",sourceDirName:"reference/registries/object-registries",slug:"/reference/registries/object-registries/",permalink:"/reference/registries/object-registries/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Registry (Abstraction)",permalink:"/reference/registries/abstract-registry"},next:{title:"Object Registry (Abstract)",permalink:"/reference/registries/object-registries/abstract-object-registry"}},c={},u=[{value:"Querying",id:"querying",level:2}],d={toc:u};function l(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,i.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"object-registries"},"Object Registries"),(0,n.kt)("p",null,"An Object Registry is a type of ",(0,n.kt)("a",{parentName:"p",href:"../Registries"},"registry")," that validates that the items added to this registry are all a\nspecific object instance. Object registries fully support everything that the parent ",(0,n.kt)("inlineCode",{parentName:"p"},"Registry")," supports,\nbut also includes the ",(0,n.kt)("inlineCode",{parentName:"p"},"query")," method, which can handle many filtering and parsing operations with a registry of\nstructured objects."),(0,n.kt)("p",null,"All Object Registries require that you at least specify an abstraction class, and optionally expect a default factory."),(0,n.kt)("h2",{id:"querying"},"Querying"),(0,n.kt)("p",null,"Object registries can be used to filter the items in a registry using chained filter setters. Behind the scenes, this\nuses the ",(0,n.kt)("a",{parentName:"p",href:"/reference/helpers/processors/list-filter"},"List Filter"),"\nand ",(0,n.kt)("a",{parentName:"p",href:"/reference/helpers/processors/list-sorter"},"List_Sorter")," processors. Refer to these documents for more details on the individual methods that can be used for filtering and sorting."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"// Default class \nclass Product_Review implements \\Underpin\\Interfaces\\Identifiable_String {\n  public function __construct(public readonly string $id, public readonly int $product_id, public readonly int $rating, public readonly int $customer_id){\n  }\n  \n  public function get_id(): string{\n    return $this->id;\n  }\n}\n\n// Create a list of products.\n$registry = \\Underpin\\Registries\\Immutable_Collection::make(Product_Review::class)->seed([\n  new Product_Review(id: 'item_1', product_id: 123, rating: 1, customer_id: 11),\n  new Product_Review(id: 'item_2', product_id: 123, rating: 2, customer_id: 12),\n  new Product_Review(id: 'item_3', product_id: 123, rating: 4, customer_id: 13),\n  new Product_Review(id: 'item_4', product_id: 123, rating: 3, customer_id: 14),\n  new Product_Review(id: 'item_5', product_id: 234, rating: 3, customer_id: 15),\n  new Product_Review(id: 'item_6', product_id: 234, rating: 4, customer_id: 16),\n  new Product_Review(id: 'item_7', product_id: 234, rating: 4, customer_id: 17),\n  new Product_Review(id: 'item_8', product_id: 234, rating: 5, customer_id: 18),\n  new Product_Review(id: 'item_9', product_id: 456, rating: 4, customer_id: 19),\n  new Product_Review(id: 'item_10', product_id: 456, rating: 3, customer_id: 110),\n]);\n\n// Returns a new Immutable Collection with items that have a product ID of 123, and is greater than 3. Items are sorted by rating, lowest to highest:\n$new_items = $registry->query()\n  ->equals('product_id',123)\n  ->greater_than('rating',3)\n  ->sort_by('rating')\n  ->get_results();\n\n// Gets the product whose customer ID is 12:\n$product_review = $registry->query()->equals('customer_id',12)->find();\n")))}l.isMDXComponent=!0}}]);