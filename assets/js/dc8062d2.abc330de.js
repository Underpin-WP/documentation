"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[411],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),l=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return o.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),d=l(n),m=r,g=d["".concat(c,".").concat(m)]||d[m]||u[m]||i;return n?o.createElement(g,s(s({ref:t},p),{},{components:n})):o.createElement(g,s({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=d;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a.mdxType="string"==typeof e?e:r,s[1]=a;for(var l=2;l<i;l++)s[l]=n[l];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9146:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var o=n(7462),r=(n(7294),n(3905));const i={},s="Collections",a={unversionedId:"reference/registries/object-registries/collections/index",id:"reference/registries/object-registries/collections/index",title:"Collections",description:"A collection is a type of Object Registry, but it uses static builders to make it possible to build an object registry without needing to declare a dedicated class.",source:"@site/docs/reference/registries/object-registries/collections/index.md",sourceDirName:"reference/registries/object-registries/collections",slug:"/reference/registries/object-registries/collections/",permalink:"/reference/registries/object-registries/collections/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Object Registry (Abstract)",permalink:"/reference/registries/object-registries/abstract-object-registry"},next:{title:"Immutable Collection",permalink:"/reference/registries/object-registries/collections/immutable-collection"}},c={},l=[{value:"Creating Collections",id:"creating-collections",level:2}],p={toc:l};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"collections"},"Collections"),(0,r.kt)("p",null,"A collection is a type of ",(0,r.kt)("a",{parentName:"p",href:"../"},"Object Registry"),", but it uses static builders to make it possible to build an object registry without needing to declare a dedicated class."),(0,r.kt)("h2",{id:"creating-collections"},"Creating Collections"),(0,r.kt)("p",null,"Since collections are object registries, you must specify what object each item in the registry will be. This is done using the ",(0,r.kt)("inlineCode",{parentName:"p"},"make")," method. When a collection is made, it will require that all items added to it are an instance of the specified class."),(0,r.kt)("p",null,"The examples below use a ",(0,r.kt)("a",{parentName:"p",href:"./collections/mutable-collection"},"Mutable Collection"),", however the ",(0,r.kt)("inlineCode",{parentName:"p"},"make")," method works the same with all collections."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"use \\Underpin\\Registries\\Mutable_Collection;\nclass Blog_Post {\n  /*...*/\n}\n\nclass Micro_Post implements Content_Type{\n  /*...*/\n}\n\n$collection = Mutable_Collection::make(Blog_Post::class);\n\n// Adds the blog post\n$collection->add('post_1', new Blog_Post());\n\n// Creates a new instance of blog post using the provided arguments in the array.\n$collection->add('post_3', [/*...*/]);\n\n// Throws exception because this isn't an instance of blog post\n$collection->add('post_2', new Micro_Post());\n")),(0,r.kt)("p",null,"The second argument in ",(0,r.kt)("inlineCode",{parentName:"p"},"make")," allows you to specify a different class to use as the default factory. This is useful in cases where you have an abstraction and also have a factory that you want to use by default if the items are created using the ",(0,r.kt)("a",{parentName:"p",href:"./abstract-object-registry#array-syntax"},"array syntax"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"use \\Underpin\\Registries\\Mutable_Collection;\ninterface Content_Type{\n  /*...*/\n}\n\nclass Micro_Post implements Content_Type{\n  /*...*/\n}\n\nclass Blog_Post implements Content_Type{\n  /*...*/\n}\n\nclass Comment{\n  /*...*/\n}\n\n// Allow all content types, but default to making a blog post instance when using array syntax.\n$collection = Mutable_Collection::make(Content_Type::class, Blog_Post::class);\n\n// Adds the blog post\n$collection->add('post_1', new Blog_Post());\n\n// Adds the micro post\n$collection->add('post_2', new Micro_Post());\n\n// Creates a new instance of blog post using the provided arguments in the array.\n$collection->add('post_3', [/*...*/]);\n\n// Throws exception because comment is not an instance of content type\n$collection->add('post_4', new Comment());\n")))}u.isMDXComponent=!0}}]);