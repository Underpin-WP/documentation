"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[18],{3905:(e,a,r)=>{r.d(a,{Zo:()=>u,kt:()=>h});var n=r(7294);function t(e,a,r){return a in e?Object.defineProperty(e,a,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[a]=r,e}function l(e,a){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var a=1;a<arguments.length;a++){var r=null!=arguments[a]?arguments[a]:{};a%2?l(Object(r),!0).forEach((function(a){t(e,a,r[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(r,a))}))}return e}function o(e,a){if(null==e)return{};var r,n,t=function(e,a){if(null==e)return{};var r,n,t={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],a.indexOf(r)>=0||(t[r]=e[r]);return t}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],a.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var i=n.createContext({}),p=function(e){var a=n.useContext(i),r=a;return e&&(r="function"==typeof e?e(a):s(s({},a),e)),r},u=function(e){var a=p(e.components);return n.createElement(i.Provider,{value:a},e.children)},c={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},d=n.forwardRef((function(e,a){var r=e.components,t=e.mdxType,l=e.originalType,i=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=p(r),h=t,y=d["".concat(i,".").concat(h)]||d[h]||c[h]||l;return r?n.createElement(y,s(s({ref:a},u),{},{components:r})):n.createElement(y,s({ref:a},u))}));function h(e,a){var r=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var l=r.length,s=new Array(l);s[0]=d;var o={};for(var i in a)hasOwnProperty.call(a,i)&&(o[i]=a[i]);o.originalType=e,o.mdxType="string"==typeof e?e:t,s[1]=o;for(var p=2;p<l;p++)s[p]=r[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},9382:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>i,contentTitle:()=>s,default:()=>c,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var n=r(7462),t=(r(7294),r(3905));const l={},s="Array Helper",o={unversionedId:"reference/helpers/array-helper",id:"reference/helpers/array-helper",title:"Array Helper",description:"The Array_Helper class contains several helper methods that make working with native PHP arrays a little easier. These methods are all statically accessible, and can be chained together using the Array Processor.",source:"@site/docs/reference/helpers/array-helper.md",sourceDirName:"reference/helpers",slug:"/reference/helpers/array-helper",permalink:"/reference/helpers/array-helper",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Underpin",permalink:"/"},next:{title:"Array Processor",permalink:"/reference/helpers/processors/array-processor"}},i={},p=[{value:"Process",id:"process",level:2},{value:"Where Not Null",id:"where-not-null",level:2},{value:"Each",id:"each",level:2},{value:"After",id:"after",level:2},{value:"Before",id:"before",level:2},{value:"Dot",id:"dot",level:2},{value:"Remove",id:"remove",level:2},{value:"Wrap",id:"wrap",level:2},{value:"Hydrate",id:"hydrate",level:2},{value:"Flatten",id:"flatten",level:2},{value:"To Indexed",id:"to-indexed",level:2},{value:"Sort",id:"sort",level:2},{value:"Pluck",id:"pluck",level:2},{value:"Pluck Recursive",id:"pluck-recursive",level:2},{value:"Cast",id:"cast",level:2},{value:"Append",id:"append",level:2},{value:"Is Associative",id:"is-associative",level:2},{value:"Normalize",id:"normalize",level:2},{value:"Proxies",id:"proxies",level:2}],u={toc:p};function c(e){let{components:a,...r}=e;return(0,t.kt)("wrapper",(0,n.Z)({},u,r,{components:a,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"array-helper"},"Array Helper"),(0,t.kt)("p",null,"The ",(0,t.kt)("inlineCode",{parentName:"p"},"Array_Helper")," class contains several helper methods that make working with native PHP arrays a little easier. These methods are all statically accessible, and can be chained together using the ",(0,t.kt)("a",{parentName:"p",href:"./processors/array-processor"},"Array Processor"),"."),(0,t.kt)("h2",{id:"process"},"Process"),(0,t.kt)("p",null,"Instantiates an ",(0,t.kt)("a",{parentName:"p",href:"./processors/array-processor"},"Array Processor"),", which allows an array to have any method in ",(0,t.kt)("inlineCode",{parentName:"p"},"Array_Helper")," used in a chain."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-php"},"// Outputs \"1, 3, bar, baz, foo\"\necho Array_Helper::process(['foo', 'bar', 'baz', null, 1, 3])\n                 ->where_not_null()\n                 ->sort(fn ($a, $b) => $a <=> $b)\n                 ->set_separator(', ');\n")),(0,t.kt)("h2",{id:"where-not-null"},"Where Not Null"),(0,t.kt)("p",null,"Helper method to filter out values that are ",(0,t.kt)("inlineCode",{parentName:"p"},"null")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-php"},"//Returns ['foo','bar','baz']\nArray_Helper::where_not_null(['foo','bar','baz',null]);\n")),(0,t.kt)("h2",{id:"each"},"Each"),(0,t.kt)("p",null,"Calls the specified callback on each item in a foreach loop. If the array is associative, the key is retained. Functional methods like this are particularly useful because they can require type safety in your callbacks."),(0,t.kt)("p",null,"The example below converts an array of tag names keyed by their URL-friendly slug into hashtags."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-php"},"//Returns ['outer-banks' => '#OuterBanks', 'north-carolina' => '#NorthCarolina', 'travel' => '#Travel']\n$hashtags = Array_Helper::each([\n  'outer-banks'    => 'Outer Banks',\n  'north-carolina' => 'North Carolina',\n  'travel'         => 'Travel',\n], fn(string $value, string $key) => '#' . String_Helper::pascal_case($value));\n")),(0,t.kt)("h2",{id:"after"},"After"),(0,t.kt)("p",null,"Fetches items after the specified array position."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-php"},"use Underpin\\Helpers\\Array_Helper;\n\n//['bar','baz']\nArray_Helper::after(['foo','bar','baz'],1);\n")),(0,t.kt)("h2",{id:"before"},"Before"),(0,t.kt)("p",null,"The opposite of ",(0,t.kt)("inlineCode",{parentName:"p"},"Array_Helper::after"),". Fetches items ",(0,t.kt)("em",{parentName:"p"},"before")," the specified array position."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-php"},"use Underpin\\Helpers\\Array_Helper;\n\n//['foo']\nArray_Helper::before(['foo','bar','baz'],1);\n")),(0,t.kt)("h2",{id:"dot"},"Dot"),(0,t.kt)("p",null,"Fetches an item from an array using a dot notation. Throws an ",(0,t.kt)("inlineCode",{parentName:"p"},"Item_Not_Found")," if the item provided could not be located in the array."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-php"},"use Underpin\\Helpers\\Array_Helper;\n\ntry{\n  // baz\n  Array_Helper::dot(['foo' => ['bar' => 'baz']], 'foo.bar')\n}catch(Item_Not_Found $e){\n  // Handle cases where the item was not found.\n}\n")),(0,t.kt)("h2",{id:"remove"},"Remove"),(0,t.kt)("p",null,"Removes an item from the array, and returns the transformed array."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-php"},"// ['peanut butter' => 'JIF', 'jelly' => 'Smucker\\'s']\nArray_Helper::remove(['milk' => 'Goshen Dairy','peanut butter' => 'JIF', 'jelly' => 'Smucker\\'s'], 'milk');\n")),(0,t.kt)("h2",{id:"wrap"},"Wrap"),(0,t.kt)("p",null,"Forces an item to be an array, even if it isn't an array."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-php"},"// [123]\nArray_Helper::wrap(123);\n")),(0,t.kt)("h2",{id:"hydrate"},"Hydrate"),(0,t.kt)("p",null,"Creates an array of new instances given the arguments to pass into the instance constructor."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-php"},"\nclass Tag{\n\n    public function __construct(public readonly string $slug, public readonly string $name){\n\n    }\n}\n\n// [(Tag),(Tag),(Tag)\nArray_Helper::hydrate([\n        ['rv-life', 'RVLife'],\n        ['travel','Travel'],\n        ['wordpress','WordPress']\n    ],Tag::class)\n")),(0,t.kt)("h2",{id:"flatten"},"Flatten"),(0,t.kt)("p",null,"Flatten arrays of arrays into a single array where the parent array is embedded as an item keyed by the ",(0,t.kt)("inlineCode",{parentName:"p"},"$key"),"."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-php"},"/**\n *  [\n *    ['id' => 'group-1', 'key' => 'value', 'another' => 'value'],\n *    ['id' => 'group-1', 'key' => 'another-value', 'another' => 'value'],\n *    ['id' => 'group-2', 'key' => 'value', 'another' => 'value'],\n *    ['id' => 'group-2', 'key' => 'another-value', 'another' => 'value']\n *  ]\n */\nArray_Helper::flatten([\n  'group-1' => [['key' => 'value', 'another' => 'value'], ['key' => 'another-value', 'another' => 'value']],\n  'group-2' => [['key' => 'value', 'another' => 'value'], ['key' => 'another-value', 'another' => 'value']],\n], 'id')\n")),(0,t.kt)("h2",{id:"to-indexed"},"To Indexed"),(0,t.kt)("p",null,"Updates the array to contain a key equal to the array's key value."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * [\n *   ['slug' => 'travel','name' => 'Travel'],\n *   ['slug' => 'rv-life','name' => 'RV Life'],\n *   ['slug' => 'wordpress','name' => 'WordPress']\n * ]\n */\nArray_Helper::to_indexed(['travel' => 'Travel','rv-life' => 'RVLife','wordpress' => 'Wordpress'], 'slug', 'name');\n")),(0,t.kt)("h2",{id:"sort"},"Sort"),(0,t.kt)("p",null,"Sorts array using the specified subject, sorting method, and direction. Transforms the array directly."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-php"},"$items = ['bar','foo','baz'];\n\n// ['foo', 'baz', 'bar']\nArray_Helper::sort($items,SORT_REGULAR,Direction::Descending);\n")),(0,t.kt)("p",null,"This also supports providing a callback for the sort, instead:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-php"},"class Tag{\n\n    public function __construct(public readonly string $slug, public readonly string $name){\n\n    }\n}\n\n$items = [\n  new Tag('rv-life','RV Life'),\n  new Tag('travel','Travel'),\n  new Tag('outer-banks', 'Outer Banks'),\n  new Tag('taos', 'Taos')\n];\n\n// [Tag(outer-banks), Tag(rv-life), Tag(taos), Tag(travel)]\nArray_Helper::sort($items,fn(Tag $a, Tag $b) => $a->slug <=> $b->slug);\n")),(0,t.kt)("h2",{id:"pluck"},"Pluck"),(0,t.kt)("p",null,"Plucks a single item from an array, given a key. Falls back to a default value if it is not set."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-php"},"// 'bar'\nArray_Helper::pluck(['foo' => 'bar'],'foo','baz');\n\n// 'baz'\nArray_Helper::pluck(['foo' => 'bar'],'invalid','baz');\n")),(0,t.kt)("p",null,"If the item is not an array, it will also provide the default value."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-php"},"// 'baz'\nArray_Helper::pluck('This is clearly not an array...and yet.','invalid','baz');\n")),(0,t.kt)("h2",{id:"pluck-recursive"},"Pluck Recursive"),(0,t.kt)("p",null,"Plucks a specific value from an array of items."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-php"},"$items = [\n    ['slug' => 'rv-life',  'name' => 'RVLife'],\n    ['slug' => 'travel', 'name' => 'Travel'],\n    ['slug' => 'wordpress', 'name' => 'WordPress'],\n    ['name' => 'Invalid']\n];\n\n// ['rv-life','travel','outer-banks','taos', null]\nArray_Helper::Pluck_Recursive($items,'slug', null);\n")),(0,t.kt)("p",null,"This also works with objects:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-php"},"class Tag{\n\n    public function __construct(public readonly string $slug, public readonly string $name){\n\n    }\n}\n\n$items = [\n  new Tag('rv-life','RV Life'),\n  new Tag('travel','Travel'),\n  new Tag('outer-banks', 'Outer Banks'),\n  new Tag('taos', 'Taos')\n];\n\n// ['rv-life','travel','outer-banks','taos']\nArray_Helper::pluck_recursive($items, 'slug', null);\n")),(0,t.kt)("h2",{id:"cast"},"Cast"),(0,t.kt)("p",null,"Cast all items in the array to the specified type."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-php"},"// [1, 234,12,123,0,0]\nArray_Helper::cast(['1','234','12.34',123,'alex',false], 'int');\n")),(0,t.kt)("h2",{id:"append"},"Append"),(0,t.kt)("p",null,"Adds the specified item(s) to the end of an array."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-php"},"// ['foo','bar','baz']\nArray_Helper::append(['foo'],'bar','baz');\n")),(0,t.kt)("h2",{id:"is-associative"},"Is Associative"),(0,t.kt)("p",null,"Returns true if this array is an associative array."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-php"},"// true\nArray_Helper::is_associative(['foo' => 'bar']);\n\n// false\nArray_Helper::is_associative(['foo', 'bar', 'baz']);\n")),(0,t.kt)("h2",{id:"normalize"},"Normalize"),(0,t.kt)("p",null,"Recursively sorts, and optionally mutates an array of arrays. Useful when preparing for caching purposes because it ensures that any array that is technically identical, although in a different order, is the same. This can also convert a closure into a format that can be safely converted into a hash."),(0,t.kt)("p",null,"Generally, this is used to prepare an array to be converted into a consistent hash, regardless of what order the items in the array are stored."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-php"},"$cached_query = [\n  'post_type'      => 'post',\n  'posts_per_page' => -1,\n  'meta_query'     => [\n    'relation' => 'OR',\n    [\n      'key'     => 'likes',\n      'value'   => 50,\n      'compare' => '>',\n      'type'    => 'numeric',\n    ],\n  ],\n];\n\n/**\n* [\n*   'meta_query' => [\n*      'relation' => 'OR'\n*      [\n*        'compare' => '>'\n*        'key' => 'likes'\n*        'type' => 'numeric'\n*        'value' => 50\n*      ]\n*  ]\n*   'post_type' => 'post'\n*   'posts_per_page' => int -1\n * ]\n */\nArray_Helper::normalize($cached_query)\n")),(0,t.kt)("h2",{id:"proxies"},"Proxies"),(0,t.kt)("p",null,"There are also several methods that serve as direct proxies for ",(0,t.kt)("inlineCode",{parentName:"p"},"array_*")," functions, with the only difference being that the order of the arguments always put the input array as the first argument (haystack comes first)."),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"map => array_map"),(0,t.kt)("li",{parentName:"ul"},"reduce => array_reduce"),(0,t.kt)("li",{parentName:"ul"},"filter => array_filter"),(0,t.kt)("li",{parentName:"ul"},"values => array_values"),(0,t.kt)("li",{parentName:"ul"},"keys => array_keys"),(0,t.kt)("li",{parentName:"ul"},"unique => array_unique"),(0,t.kt)("li",{parentName:"ul"},"key_sort => ksort"),(0,t.kt)("li",{parentName:"ul"},"merge => array_merge"),(0,t.kt)("li",{parentName:"ul"},"reverse => array_reverse"),(0,t.kt)("li",{parentName:"ul"},"prepend => array_unshift"),(0,t.kt)("li",{parentName:"ul"},"intersect => array_intersect"),(0,t.kt)("li",{parentName:"ul"},"intersect_keys => array_intersect_keys"),(0,t.kt)("li",{parentName:"ul"},"diff => array_diff"),(0,t.kt)("li",{parentName:"ul"},"replace_recursive => array_replace_recursive"),(0,t.kt)("li",{parentName:"ul"},"replace => array_replace")))}c.isMDXComponent=!0}}]);